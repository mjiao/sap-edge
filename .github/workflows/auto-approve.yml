# SPDX-FileCopyrightText: 2025 SAP edge team
# SPDX-FileContributor: Manjun Jiao (@mjiao)
# SPDX-FileContributor: Kirill Satarin (@kksat)
#
# SPDX-License-Identifier: Apache-2.0

---
name: Auto-approve Validation PRs

"on":
  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main

permissions:
  pull-requests: write

jobs:
  auto-approve:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if changes are only in .tekton folder
        id: check-tekton-folder
        run: |
          # Get list of modified files using GitHub API approach
          FILES=""
          # First try using git merge-base to find the common ancestor
          if [[ -n "${{ github.event.pull_request.base.ref }}" ]]; then
            echo "Fetching base branch: ${{ github.event.pull_request.base.ref }}"
            git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }} 2>/dev/null || true
            # Try to find merge base and get diff
            MERGE_BASE=$(git merge-base HEAD origin/${{ github.event.pull_request.base.ref }} 2>/dev/null || echo "")
            if [[ -n "$MERGE_BASE" ]]; then
              FILES=$(git diff --name-only $MERGE_BASE HEAD 2>/dev/null || echo "")
              echo "Using merge-base approach: $MERGE_BASE"
            fi
          fi

          # Fallback: if merge-base failed, try with origin/main
          if [[ -z "$FILES" ]]; then
            echo "Merge-base failed, trying origin/main..."
            git fetch origin main:refs/remotes/origin/main 2>/dev/null || true
            FILES=$(git diff --name-only origin/main HEAD 2>/dev/null || echo "")
          fi

          # Final fallback: check recent commits
          if [[ -z "$FILES" ]]; then
            echo "All previous methods failed, checking recent commits..."
            FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          fi

          # If no files found at all, assume no changes
          if [[ -z "$FILES" ]]; then
            echo "No files found to check"
            echo "tekton_only=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Files to check: $FILES"

          # Check if all files are in .tekton folder
          NON_TEKTON_FILES=""
          for file in $FILES; do
            if [[ ! "$file" =~ ^\.tekton/ ]]; then
              NON_TEKTON_FILES="$NON_TEKTON_FILES $file"
            fi
          done

          if [[ -n "$NON_TEKTON_FILES" ]]; then
            echo "Found files outside .tekton folder: $NON_TEKTON_FILES"
            echo "tekton_only=false" >> $GITHUB_OUTPUT
          else
            echo "All files are in .tekton folder"
            echo "tekton_only=true" >> $GITHUB_OUTPUT
          fi

      - name: Check if files contain pipelinerun
        id: check-pipelinerun
        run: |
          # Get list of modified .tekton files using same approach as previous step
          TEKTON_FILES=""
          # First try using git merge-base to find the common ancestor
          if [[ -n "${{ github.event.pull_request.base.ref }}" ]]; then
            MERGE_BASE=$(git merge-base HEAD origin/${{ github.event.pull_request.base.ref }} 2>/dev/null || echo "")
            if [[ -n "$MERGE_BASE" ]]; then
              TEKTON_FILES=$(git diff --name-only $MERGE_BASE HEAD 2>/dev/null | grep '^\.tekton/' || echo "")
              echo "Using merge-base approach for .tekton files"
            fi
          fi

          # Fallback: if merge-base failed, try with origin/main
          if [[ -z "$TEKTON_FILES" ]]; then
            echo "Merge-base failed, trying origin/main for .tekton files..."
            TEKTON_FILES=$(git diff --name-only origin/main HEAD 2>/dev/null | grep '^\.tekton/' || echo "")
          fi

          # Final fallback: check recent commits
          if [[ -z "$TEKTON_FILES" ]]; then
            echo "All previous methods failed, checking recent commits for .tekton files..."
            TEKTON_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null | grep '^\.tekton/' || echo "")
          fi

          if [[ -z "$TEKTON_FILES" ]]; then
            echo "No files found in .tekton folder"
            echo "has_pipelinerun=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Tekton files to check: $TEKTON_FILES"

          # Check each file for pipelinerun content
          FILES_WITH_PIPELINERUN=""
          for file in $TEKTON_FILES; do
            # Try to get file content using different methods
            FILE_CONTENT=""
            if [[ -f "$file" ]]; then
              FILE_CONTENT=$(cat "$file")
            elif [[ -n "${{ github.event.pull_request.head.sha }}" ]]; then
              FILE_CONTENT=$(git show ${{ github.event.pull_request.head.sha }}:$file 2>/dev/null || echo "")
            else
              FILE_CONTENT=$(git show HEAD:$file 2>/dev/null || echo "")
            fi

            if [[ -n "$FILE_CONTENT" ]] && echo "$FILE_CONTENT" | grep -i "kind:\s*PipelineRun" > /dev/null; then
              FILES_WITH_PIPELINERUN="$FILES_WITH_PIPELINERUN $file"
            fi
          done

          if [[ -n "$FILES_WITH_PIPELINERUN" ]]; then
            echo "Files containing PipelineRun: $FILES_WITH_PIPELINERUN"
            echo "has_pipelinerun=true" >> $GITHUB_OUTPUT
          else
            echo "No files contain PipelineRun"
            echo "has_pipelinerun=false" >> $GITHUB_OUTPUT
          fi

      - name: Auto-approve if conditions met
        if: >-
          startsWith(github.event.pull_request.title, '[Validation]') &&
          contains(fromJSON('["mjiao", "kksat", "RishabhKodes"]'), github.event.pull_request.user.login) &&
          steps.check-tekton-folder.outputs.tekton_only == 'true' &&
          steps.check-pipelinerun.outputs.has_pipelinerun == 'true'
        run: gh pr review --approve "$PR_URL"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}

      - name: Comment on non-compliant PR
        if: >-
          startsWith(github.event.pull_request.title, '[Validation]') &&
          contains(fromJSON('["mjiao", "kksat", "RishabhKodes"]'), github.event.pull_request.user.login) &&
          (steps.check-tekton-folder.outputs.tekton_only == 'false' || steps.check-pipelinerun.outputs.has_pipelinerun == 'false')
        run: |
          COMMENT="❌ Auto-approval failed. This PR must:

          - Only modify files in the \`.tekton\` folder
          - Only modify files that contain \`PipelineRun\` resources

          Current status:
          - Files in .tekton folder only: ${{ steps.check-tekton-folder.outputs.tekton_only }}
          - Files contain PipelineRun: ${{ steps.check-pipelinerun.outputs.has_pipelinerun }}"

          gh pr comment "$PR_URL" --body "$COMMENT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}

      - name: Validate PR requirements
        run: |
          if [[ "${{ steps.check-tekton-folder.outputs.tekton_only }}" == "false" ]]; then
            echo "❌ PR validation failed: Files outside .tekton folder detected"
            echo "This PR must only modify files in the .tekton folder"
            exit 1
          fi

          if [[ "${{ steps.check-pipelinerun.outputs.has_pipelinerun }}" == "false" ]]; then
            echo "❌ PR validation failed: No PipelineRun resources found"
            echo "This PR must modify files that contain PipelineRun resources"
            exit 1
          fi

          echo "✅ PR validation passed"
          echo "All requirements met:"
          echo "- Files in .tekton folder only: ${{ steps.check-tekton-folder.outputs.tekton_only }}"
          echo "- Files contain PipelineRun: ${{ steps.check-pipelinerun.outputs.has_pipelinerun }}"
