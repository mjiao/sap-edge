# SPDX-FileCopyrightText: 2024 SAP edge team
# SPDX-FileContributor: Manjun Jiao (@mjiao)
#
# SPDX-License-Identifier: Apache-2.0

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: edgelm-pod-status-check
spec:
  description: Check if all pods in edgelm namespace are running correctly or completed
  params:
    - name: aroClusterName
      type: string
      description: "ARO cluster name"
    - name: azureSecretName
      type: string
      description: "Name of the Kubernetes Secret containing Azure service principal credentials"
    - name: namespace
      type: string
      description: "Namespace to check pod status"
      default: "edgelm"
    - name: timeoutMinutes
      type: string
      description: "Timeout in minutes to wait for pods to be ready"
      default: "15"
  workspaces:
    - name: source
  steps:
    - name: check-pods
      image: registry.access.redhat.com/ubi9/ubi
      workingDir: $(workspaces.source.path)
      env:
        - name: CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: $(params.azureSecretName)
              key: CLIENT_ID
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: $(params.azureSecretName)
              key: CLIENT_SECRET
        - name: TENANT_ID
          valueFrom:
            secretKeyRef:
              name: $(params.azureSecretName)
              key: TENANT_ID
        - name: ARO_RESOURCE_GROUP
          valueFrom:
            secretKeyRef:
              name: $(params.azureSecretName)
              key: ARO_RESOURCE_GROUP
        - name: ARO_CLUSTER_NAME
          value: $(params.aroClusterName)
        - name: NAMESPACE
          value: $(params.namespace)
        - name: TIMEOUT_MINUTES
          value: $(params.timeoutMinutes)
      script: |
        #!/bin/bash
        set -euo pipefail
        
        echo "🔍 Starting pod status check in namespace: ${NAMESPACE}"
        
        # Install required tools
        echo "📦 Installing required tools..."
        # Install make, libicu, and jq first (needed for makefile operations and Bicep)
        dnf install -y make libicu jq
        
        # Install Azure CLI
        echo "📦 Installing Azure CLI..."
        # Install Azure CLI using the official Microsoft repository
        rpm --import https://packages.microsoft.com/keys/microsoft.asc
        dnf install -y https://packages.microsoft.com/config/rhel/9.0/packages-microsoft-prod.rpm
        dnf clean all
        # Pin to a stable version to avoid HTTP client issues
        dnf install -y azure-cli-2.59.0
        
        # Install OpenShift CLI
        echo "📦 Installing OpenShift CLI..."
        curl -L https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz | tar xz
        mv oc kubectl /usr/local/bin/
        
        # Login to Azure
        echo "🔐 Logging into Azure..."
        make azure-login
        
        # Get ARO credentials and login to cluster
        echo "🔐 Getting ARO credentials..."
        az aro get-admin-kubeconfig --name "${ARO_CLUSTER_NAME}" --resource-group "${ARO_RESOURCE_GROUP}" --file kubeconfig
        export KUBECONFIG="$(pwd)/kubeconfig"
        
        # Verify cluster access
        echo "✅ Verifying cluster access..."
        oc get nodes
        
        # Check if namespace exists
        echo "🔍 Checking if namespace '${NAMESPACE}' exists..."
        if ! oc get namespace "${NAMESPACE}" >/dev/null 2>&1; then
          echo "⚠️  Namespace '${NAMESPACE}' does not exist yet"
          echo "📋 Available namespaces:"
          oc get namespaces
          echo ""
          echo "ℹ️  This may be normal if the namespace hasn't been created yet."
          echo "✅ Pod status check completed - namespace not found (this may be expected)"
          exit 0
        fi
        
        echo "✅ Namespace '${NAMESPACE}' exists"
        
        # Get initial pod status
        echo "📋 Current pod status in namespace '${NAMESPACE}':"
        oc get pods -n "${NAMESPACE}" -o wide || echo "No pods found in namespace"
        echo ""
        
        # Function to check pod status
        check_pod_status() {
          local pods_info
          pods_info=$(oc get pods -n "${NAMESPACE}" -o json 2>/dev/null || echo '{"items":[]}')
          
          local total_pods
          total_pods=$(echo "$pods_info" | jq -r '.items | length')
          
          if [ "$total_pods" -eq 0 ]; then
            echo "📋 No pods found in namespace '${NAMESPACE}'"
            return 0
          fi
          
          echo "📊 Pod Status Summary:"
          echo "Total pods: $total_pods"
          
          # Count pods by status
          local running_pods completed_pods failed_pods pending_pods other_pods
          running_pods=$(echo "$pods_info" | jq -r '.items[] | select(.status.phase == "Running") | .metadata.name' | wc -l)
          completed_pods=$(echo "$pods_info" | jq -r '.items[] | select(.status.phase == "Succeeded") | .metadata.name' | wc -l)
          failed_pods=$(echo "$pods_info" | jq -r '.items[] | select(.status.phase == "Failed") | .metadata.name' | wc -l)
          pending_pods=$(echo "$pods_info" | jq -r '.items[] | select(.status.phase == "Pending") | .metadata.name' | wc -l)
          other_pods=$((total_pods - running_pods - completed_pods - failed_pods - pending_pods))
          
          echo "  Running: $running_pods"
          echo "  Completed: $completed_pods"
          echo "  Failed: $failed_pods"
          echo "  Pending: $pending_pods"
          echo "  Other: $other_pods"
          echo ""
          
          # Show detailed status for non-running/completed pods
          if [ "$failed_pods" -gt 0 ]; then
            echo "❌ Failed pods:"
            echo "$pods_info" | jq -r '.items[] | select(.status.phase == "Failed") | "  - " + .metadata.name + " (" + .status.phase + ")"'
            echo ""
          fi
          
          if [ "$pending_pods" -gt 0 ]; then
            echo "⏳ Pending pods:"
            echo "$pods_info" | jq -r '.items[] | select(.status.phase == "Pending") | "  - " + .metadata.name + " (" + .status.phase + ")"'
            echo ""
          fi
          
          # Check if all pods are in acceptable states (Running or Succeeded)
          local acceptable_pods
          acceptable_pods=$((running_pods + completed_pods))
          
          if [ "$acceptable_pods" -eq "$total_pods" ] && [ "$failed_pods" -eq 0 ]; then
            echo "✅ All $total_pods pods are in acceptable states (Running or Completed)"
            return 0
          else
            echo "⚠️  $((total_pods - acceptable_pods)) pods are not in acceptable states"
            return 1
          fi
        }
        
        # Wait for pods to be ready with timeout
        echo "⏳ Waiting for all pods to be Running or Completed (timeout: ${TIMEOUT_MINUTES} minutes)..."
        timeout_seconds=$((TIMEOUT_MINUTES * 60))
        start_time=$(date +%s)
        
        while true; do
          current_time=$(date +%s)
          elapsed=$((current_time - start_time))
          
          if [ $elapsed -ge $timeout_seconds ]; then
            echo "⏰ Timeout reached (${TIMEOUT_MINUTES} minutes)"
            break
          fi
          
          if check_pod_status; then
            echo "🎉 All pods in namespace '${NAMESPACE}' are in acceptable states!"
            
            # Final detailed pod listing
            echo ""
            echo "📋 Final pod status:"
            oc get pods -n "${NAMESPACE}" -o wide
            
            # Save pod status to workspace
            cat > edgelm-pod-status.txt << EOF
        NAMESPACE=${NAMESPACE}
        POD_CHECK_STATUS=SUCCESS
        CHECK_TIMESTAMP=$(date -Iseconds)
        TOTAL_PODS=$(oc get pods -n "${NAMESPACE}" -o json | jq '.items | length')
        EOF
            
            echo "✅ Pod status check completed successfully!"
            exit 0
          fi
          
          echo "⏳ Waiting... (${elapsed}s elapsed)"
          sleep 30
        done
        
        # Timeout reached or final check failed
        echo "❌ Pod status check failed or timed out"
        echo ""
        echo "📋 Final pod status:"
        oc get pods -n "${NAMESPACE}" -o wide || echo "Failed to get pod status"
        echo ""
        echo "🔍 Describe problematic pods:"
        oc get pods -n "${NAMESPACE}" -o json | jq -r '.items[] | select(.status.phase != "Running" and .status.phase != "Succeeded") | .metadata.name' | while read -r pod_name; do
          if [ -n "$pod_name" ]; then
            echo "--- Pod: $pod_name ---"
            oc describe pod "$pod_name" -n "${NAMESPACE}" || echo "Failed to describe pod $pod_name"
            echo ""
          fi
        done
        
        # Save failure status
        cat > edgelm-pod-status.txt << EOF
        NAMESPACE=${NAMESPACE}
        POD_CHECK_STATUS=FAILED
        CHECK_TIMESTAMP=$(date -Iseconds)
        TIMEOUT_MINUTES=${TIMEOUT_MINUTES}
        EOF
        
        exit 1