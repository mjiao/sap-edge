# SPDX-FileCopyrightText: 2025 SAP edge team
# SPDX-FileContributor: Manjun Jiao (@mjiao)
#
# SPDX-License-Identifier: Apache-2.0

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: aro-teardown
spec:
  params:
    - name: aroClusterName
      type: string
      description: "ARO cluster name"
    - name: azureSecretName
      type: string
      description: "Name of the Kubernetes Secret containing Azure service principal credentials and ARO resource group"
      default: "azure-sp-secret"
  workspaces:
    - name: source
  steps:
    - name: teardown-aro
      image: registry.access.redhat.com/ubi9/ubi
      workingDir: $(workspaces.source.path)
      env:
        - name: ARO_CLUSTER_NAME
          value: "$(params.aroClusterName)"
      envFrom:
        - secretRef:
            name: $(params.azureSecretName)
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        
        echo "üì¶ Installing required packages..."
        # Install make, libicu, and jq first (needed for makefile operations)
        dnf install -y make libicu jq
        
        echo "üì¶ Installing Azure CLI..."
        # Install Azure CLI using the official Microsoft repository
        rpm --import https://packages.microsoft.com/keys/microsoft.asc
        dnf install -y https://packages.microsoft.com/config/rhel/9.0/packages-microsoft-prod.rpm
        dnf clean all
        dnf install -y azure-cli

        # Use values from azure-sp-secret and map to uppercase for bicep.makefile
        export ARO_RESOURCE_GROUP="$aroResourceGroup"
        export CLIENT_ID="$clientId"
        export CLIENT_SECRET="$clientSecret"
        export TENANT_ID="$tenantId"
        
        echo "üîê Logging into Azure..."
        make azure-login


        echo "üìã Setting subscription..."
        make azure-set-subscription
        
        # Check if resource group exists
        if ! az group show --name "$ARO_RESOURCE_GROUP" >/dev/null 2>&1; then
          echo "‚úÖ Resource group $ARO_RESOURCE_GROUP does not exist - nothing to clean up"
          exit 0
        fi
        
        echo "üóëÔ∏è Starting ARO cluster teardown..."
        
        # Check if cluster exists and delete it
        CLUSTER_EXISTS_RESULT=$(make aro-cluster-exists | tail -1)
        if [[ "$CLUSTER_EXISTS_RESULT" == "true" ]]; then
          echo "üóëÔ∏è Deleting ARO cluster..."
          az aro delete --name "$ARO_CLUSTER_NAME" --resource-group "$ARO_RESOURCE_GROUP" --yes --no-wait
          
          echo "‚è≥ Waiting for cluster deletion to complete..."
          while true; do
            CLUSTER_EXISTS_RESULT=$(make aro-cluster-exists | tail -1)
            if [[ "$CLUSTER_EXISTS_RESULT" == "false" ]]; then
              echo "‚úÖ ARO cluster deleted successfully!"
              break
            else
              echo "‚è≥ Cluster still being deleted... waiting 60 seconds"
              sleep 60
            fi
          done
        else
          echo "‚ÑπÔ∏è ARO cluster $ARO_CLUSTER_NAME does not exist"
        fi
        
        # Clean up ARO-related resources only (keeping resource group)
        echo "üßπ Cleaning up ARO-related resources..."
        
        # Explicitly clean up PostgreSQL and Redis
        echo "üóëÔ∏è Cleaning up PostgreSQL server..."
        if az postgres flexible-server show --resource-group "$ARO_RESOURCE_GROUP" --name "postgres-${ARO_CLUSTER_NAME}" >/dev/null 2>&1; then
          az postgres flexible-server delete --resource-group "$ARO_RESOURCE_GROUP" --name "postgres-${ARO_CLUSTER_NAME}" --yes
          echo "‚úÖ PostgreSQL server deletion initiated"
        else
          echo "‚ÑπÔ∏è PostgreSQL server not found"
        fi
        
        echo "üóëÔ∏è Cleaning up Redis cache..."
        REDIS_CACHES=$(az redis list --resource-group "$ARO_RESOURCE_GROUP" --query "[?contains(name, 'redis-${ARO_CLUSTER_NAME}')].name" -o tsv)
        if [[ -n "$REDIS_CACHES" ]]; then
          for redis_name in $REDIS_CACHES; do
            echo "üóëÔ∏è Deleting Redis cache: $redis_name"
            az redis delete --resource-group "$ARO_RESOURCE_GROUP" --name "$redis_name" --yes
          done
          echo "‚úÖ Redis cache deletion initiated"
        else
          echo "‚ÑπÔ∏è Redis cache not found"
        fi
        
        # Clean up other ARO-related resources
        ARO_RESOURCES=$(az resource list --resource-group "$ARO_RESOURCE_GROUP" --query "[?contains(name, '$ARO_CLUSTER_NAME') || (tags && tags.cluster && contains(tags.cluster, '$ARO_CLUSTER_NAME'))].id" -o tsv)
        if [[ -n "$ARO_RESOURCES" ]]; then
          echo "Found other ARO-related resources to delete:"
          echo "$ARO_RESOURCES"
          az resource delete --resource-group "$ARO_RESOURCE_GROUP" --ids $ARO_RESOURCES --yes || echo "Some ARO resources may have already been deleted"
        else
          echo "‚ÑπÔ∏è No additional ARO-related resources found"
        fi
        
        echo "‚úÖ ARO cluster teardown completed successfully!"
        echo "‚ÑπÔ∏è Resource group '$ARO_RESOURCE_GROUP' has been preserved" 