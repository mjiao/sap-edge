# SPDX-FileCopyrightText: 2024 SAP edge team
# SPDX-FileContributor: Manjun Jiao (@mjiao)
#
# SPDX-License-Identifier: Apache-2.0

---
- name: TRUST TASK 1 - Starting certificate trust configuration
  debug:
    msg: "üîç Starting certificate trust configuration tasks"

- name: TRUST TASK 2 - Test task to verify execution
  debug:
    msg: "‚úÖ This task should show up in logs if file is executing properly"

- name: Get Quay registry endpoint
  kubernetes.core.k8s_info:
    api_version: quay.redhat.com/v1
    kind: QuayRegistry
    name: "{{ quay.registry_name }}"
    namespace: "{{ quay.namespace }}"
    kubeconfig: "{{ kubeconfig_path | default(omit) }}"
  register: quay_registry

- name: Validate Quay registry availability
  assert:
    that:
      - quay_registry.resources | length > 0
      - quay_registry.resources[0].status.registryEndpoint is defined
      - quay_registry.resources[0].status.registryEndpoint | length > 0
    fail_msg: "Quay registry not found or endpoint not available"

- name: Extract registry hostname
  set_fact:
    registry_endpoint: "{{ quay_registry.resources[0].status.registryEndpoint }}"
    registry_hostname: "{{ quay_registry.resources[0].status.registryEndpoint | regex_replace('^https://', '') }}"

- name: Display registry information
  debug:
    msg:
      - "Registry Endpoint: {{ registry_endpoint }}"
      - "Registry Hostname: {{ registry_hostname }}"

- name: Extract OpenShift ingress CA certificate
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: router-ca
    namespace: openshift-ingress-operator
    kubeconfig: "{{ kubeconfig_path | default(omit) }}"
  register: router_ca_secret

- name: Debug router CA secret contents
  debug:
    msg:
      - "Router CA secret keys: {{ router_ca_secret.resources[0].data.keys() | list }}"
      - "Available files: {{ router_ca_secret.resources[0].data | dict2items | map(attribute='key') | list }}"

- name: Decode CA certificate
  set_fact:
    ca_bundle: >-
      {{
        router_ca_secret.resources[0].data['tls.crt']
        | b64decode
      }}
  when: "'tls.crt' in router_ca_secret.resources[0].data"

- name: Fallback to any certificate file
  set_fact:
    ca_bundle: >-
      {{
        router_ca_secret.resources[0].data.values() | first | b64decode
      }}
  when:
    - ca_bundle is not defined
    - router_ca_secret.resources[0].data | length > 0

- name: Alternative - Get ingress CA from configmap (OpenShift default)
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: default-ingress-cert
    namespace: openshift-config-managed
    kubeconfig: "{{ kubeconfig_path | default(omit) }}"
  register: ingress_ca_configmap
  when: ca_bundle is not defined

- name: Extract CA from configmap
  set_fact:
    ca_bundle: "{{ ingress_ca_configmap.resources[0].data['ca-bundle.crt'] }}"
  when:
    - ca_bundle is not defined
    - ingress_ca_configmap is defined
    - ingress_ca_configmap.resources | length > 0
    - "'ca-bundle.crt' in ingress_ca_configmap.resources[0].data"

- name: Final fallback - Create minimal trust configuration
  set_fact:
    ca_bundle: |
      # Unable to extract ingress CA certificate
      # This is a placeholder to enable insecure registry trust
      # Generated by Ansible for registry: {{ registry_hostname }}
    skip_ca_verification: true
  when: ca_bundle is not defined

- name: Verify CA certificate was extracted
  debug:
    msg:
      - "‚úÖ CA certificate extracted successfully"
      - "Certificate length: {{ ca_bundle | length }} characters"
      - "Skip verification: {{ skip_ca_verification | default(false) }}"

- name: Get current cluster image configuration
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Image
    name: cluster
    kubeconfig: "{{ kubeconfig_path | default(omit) }}"
  register: cluster_image_config

- name: Determine ConfigMap name for trusted CAs
  set_fact:
    configmap_name: >-
      {{
        cluster_image_config.resources[0].spec.additionalTrustedCA.name
        | default('trusted-registry-cabundles')
        | default('trusted-registry-cabundles', true)
      }}

- name: Create registry key for ConfigMap
  set_fact:
    registry_key: "{{ registry_hostname | regex_replace(':', '..') }}"

- name: Check if trusted CA ConfigMap exists
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: "{{ configmap_name }}"
    namespace: openshift-config
    kubeconfig: "{{ kubeconfig_path | default(omit) }}"
  register: existing_configmap

- name: Create or update trusted CA ConfigMap
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ configmap_name }}"
        namespace: openshift-config
      data: >-
        {{
          (existing_configmap.resources[0].data | default({}))
          | combine({registry_key: ca_bundle})
        }}
    state: present
    kubeconfig: "{{ kubeconfig_path | default(omit) }}"
  register: configmap_result
  when: not (skip_ca_verification | default(false))

- name: Update cluster image configuration
  kubernetes.core.k8s:
    definition:
      apiVersion: config.openshift.io/v1
      kind: Image
      metadata:
        name: cluster
      spec:
        additionalTrustedCA:
          name: "{{ configmap_name }}"
    state: present
    merge_type: merge
    kubeconfig: "{{ kubeconfig_path | default(omit) }}"
  when: not (skip_ca_verification | default(false))

- name: Configure insecure registry (when CA not available)
  kubernetes.core.k8s:
    definition:
      apiVersion: config.openshift.io/v1
      kind: Image
      metadata:
        name: cluster
      spec:
        registrySources:
          insecureRegistries:
            - "{{ registry_hostname }}"
    state: present
    merge_type: merge
    kubeconfig: "{{ kubeconfig_path | default(omit) }}"
  when: skip_ca_verification | default(false)

- name: Display trust configuration results
  debug:
    msg: >-
      {{
        [
          "‚úÖ Certificate trust configured successfully",
          "Registry: " + registry_hostname,
          "Configuration type: " + ("Insecure registry" if (skip_ca_verification | default(false)) else "Trusted CA ConfigMap"),
          "ConfigMap: " + (configmap_name if not (skip_ca_verification | default(false)) else "Not created (insecure mode)"),
          "‚ö†Ô∏è  Note: OpenShift nodes may need to restart to pick up the configuration changes"
        ]
      }}

- name: Set trust configuration status as completed
  set_fact:
    trust_configured: true